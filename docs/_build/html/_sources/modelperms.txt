Models Permissions
==================

Smooth permission allow you, to create permission on each model easily.

Basic permissions
-----------------

Smooth perms has basics permissions :

* **can_change** : User can change this object
* **can_advanced_settings** : User can change advanced setting in object (define by dev)
* **can_delete** : User can delete this object
* **can_change_permissions** : User can add or change permissions in object
* **can_delete_permissions** : User can delete permissions
* **can_view** : User can only see field in read_only

For each permission you can defined witch field is readable, changeable or exclude.
Explain in Admin part

Model example
-------------

For this part, we have this model::

  from django.db import models

  class MyModel(models.Model):
     ...



Add permissions to this model
-----------------------------

For create and associate model to model permission, you need to create 2 classes, and update inheritance of model like bellow::

  from django.db import models
  from smooth_perms.models import GlobalPermissionMixin, ModelPermission
  from smooth_perms.managers import GlobalPermissionManager

  class MyModelPermissionManager(GlobalPermissionManager):
    foreign_key = 'fk_object'

  class MyModelPermission(GlobalPermissionMixin):
     fk_object = models.ForeignKey('MyModel')

     objects = MyModelPermissionManager()

  class MyModel(ModelPermission):
     ...
     permissions = MyModelPermission


.. important:: The content of ``foreign_key`` in ``GlobalPermissionManager`` must be the variable name of model foreign key in ``GlobalPermissionMixin``

.. important:: The class ``GlobalPermissionMixin`` must be defined before ``ModelPermission``

Now we can add permission for each instance of MyModel


Create a custom permission
--------------------------

Smooth perms allow you to create custom permission for each model.
For this you need to do 2 things :

* Create your permissions with this syntaxe : ``can_%s = models.BooleanField()``
* Create or update ``PERMISSIONS`` variable in your ``GlobalPermissionMixin`` (you don't need this variable if you use basic permissions), she must contain the name ( the ``%s`` in ``can_%s``)
::

  class MyModelPermission(GlobalPermissionMixin):
     fk_object = models.ForeignKey('MyModel')

     PERMISSIONS = ('asucre',)

     can_asucre = models.BooleanField(_("can a sucre"), default=False)

     objects = MyModelPermissionManager()


Permission functions
====================

We take the last example above::

  from django.db import models
  from smooth_perms.models import GlobalPermissionMixin, ModelPermission
  from smooth_perms.managers import GlobalPermissionManager

  class MyModelPermissionManager(GlobalPermissionManager):
    foreign_key = 'fk_object'

  class MyModelPermission(GlobalPermissionMixin):
     fk_object = models.ForeignKey('MyModel')

     PERMISSIONS = ('asucre',)

     can_asucre = models.BooleanField(_("can a sucre"), default=False)

     objects = MyModelPermissionManager()

  class MyModel(ModelPermission):
     ...
     permissions = MyModelPermission


Permission function
-------------------

For each permission you can have a function ``has_%s_permission(self, request)`` in ModelPermission.
If you don't create this function for your new permission, the generic function is called::

  def has_generic_permission(self, request, permission_type):

      user = request.user
      if not user.is_authenticated():
          return False
      elif user.is_superuser:
          return True
      elif user == self.owner:
          return True
      else:
          permission = self.permissions.objects.get_tanuki_id_list(user, permission_type)
          if permission == GlobalPermissionManager.get_grant_all():
              return True
          else:
              return self.id in permission


If you want create your own validation, you can create your own function like bellow::

  def has_asucre_permission(self, request):
      ...
      return Boolean


.. note:: This function must be defined in ModelPermission (in our example it's ``MyModel``)
